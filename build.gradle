// Configuration dependencies, e.g. for buildscript plugins
buildscript {
  repositories {
    mavenCentral()
    maven { url "https://maven.eveoh.nl/content/repositories/releases" }
    maven { url "http://www.terracotta.org/download/reflector/releases" }
    maven { url "https://plugins.gradle.org/m2/" }
    jcenter()
    mavenLocal()
  }

  dependencies {
    classpath "gradle.plugin.org.zeroturnaround:gradle-jrebel-plugin:1.1.8"
    classpath "com.bmuschko:gradle-cargo-plugin:2.6.1"
    classpath "org.hibernate:hibernate-gradle-plugin:5.4.18.Final"
  }
}

plugins {
  id 'net.saliman.properties' version '1.5.1'
}

// Some properties that we use to resolve dependencies etc.
ext {
  scalaVersion = "2.13.1"
  scalaMajorVersion = "2.13"
  springVersion = "5.2.4.RELEASE"
  hibernateVersion = "5.4.18.Final"
  jacksonVersion = "2.9.10"
  jacksonDatabindVersion = "2.9.10.1"
  jacksonScalaModuleVersion = "2.9.10"
  elasticsearchVersion = "6.7.2"
  elastic4sVersion = "6.7.3"
  poiVersion = "4.1.1-warwick"
  tilesVersion = "3.0.8"
  jcloudsVersion = "2.2.0"
  warwickUtilsVersion = "20200522"
  surefireVersion = "2.22.2"
}

allprojects {
  apply plugin: 'idea'
  idea {
    module {
      outputDir file('build/classes/scala/main')
      testOutputDir file('build/classes/scala/test')
    }
  }
}

// Configuration that applies to all subprojects (including common, so nothing war-specific here)
// TODO get rid of the war plugin here
subprojects {
  apply plugin: 'scala'
  apply plugin: 'org.zeroturnaround.gradle.jrebel'
  apply plugin: 'war'

  scala {
    zincVersion = '1.3.1'
  }

  // TAB-5441 - additional jrebel config to include language specific build dirs
  rebel {
    classpath {
      // the default element
      resource {}

      resource {
        directory = "build/classes/java/main"
        includes = ["**/*"]
        excludes = ["*.java", "*.properties"]
      }

      resource {
        directory = "build/classes/scala/main"
        includes = ["**/*"]
        excludes = ["*.scala", "*.properties"]
      }
    }
  }

  // Target Java 8
  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  sourceSets {
    // We want joint Scala/Java compilation, so remove all the Java source directories and have them compiled
    // by the scala compiler instead
    main {
      java.srcDirs = []
      scala.srcDirs += 'src/main/java'

      // Allow resources to be defined directly in the source directory
      resources.srcDirs += 'src/main/scala'
    }
    test {
      java.srcDirs = []
      scala.srcDirs += 'src/test/java'

      // Allow resources to be defined directly in the source directory
      resources.srcDirs += 'src/test/scala'

      // Same configuration as the WAR classloader
      resources.srcDirs += 'src/main/webapp'
    }
  }

  // In this section you declare where to find the dependencies of your project
  repositories {
    mavenCentral()
    maven { url 'https://mvn.elab.warwick.ac.uk/nexus/repository/public-anonymous/' }
    maven { url 'http://oauth.googlecode.com/svn/code/maven' }
    maven { url 'http://repo.spring.io/snapshot' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://repository.apache.org/content/repositories/snapshots' }
    maven { url 'http://dl.bintray.com/scalaz/releases' }
    mavenLocal()
  }

  configurations {
    all {
      exclude group: 'xerces', module: 'xerces'
      exclude group: 'javax.servlet', module: 'servletapi'
      exclude group: 'servletapi', module: 'servletapi'
      exclude group: 'jboss', module: 'javassist'

      resolutionStrategy {
        // deal with transitive dep relocation
        force 'xml-apis:xml-apis:1.4.01'
      }
    }
  }

  dependencies {
    compile "org.scala-lang:scala-library:${scalaVersion}"

    // 'providedCompile' deps are not included in WAR and also makes it compile within IDEA internally.
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'javax.servlet.jsp:javax.servlet.jsp-api:2.3.3'
    compile 'org.apache.taglibs:taglibs-standard-jstlel:1.2.5'

    /* LOGGING */
    providedCompile 'uk.ac.warwick:warwick-logging:1.1:all'

    // Provided by the above
    providedCompile 'ch.qos.logback:logback-classic:1.2.3'
    providedCompile('net.logstash.logback:logstash-logback-encoder:5.2') {
      exclude group: 'com.fasterxml.jackson.core'
    }
    providedCompile 'org.slf4j:slf4j-api:1.7.26'

    compile 'org.slf4j:log4j-over-slf4j:1.7.26'
    compile 'org.slf4j:jcl-over-slf4j:1.7.26'
    compile 'org.slf4j:jul-to-slf4j:1.7.26'

    // Not actually provided -  it's a ruse to exclude commons-logging from the WAR.
    // The API at runtime is provided by jcl-over-slf4j.
    providedCompile 'commons-logging:commons-logging:1.2'
    /* ******* */

    testCompile 'junit:junit:4.12'
    testCompile "org.specs2:specs2-mock_${scalaMajorVersion}:4.8.0"
    testCompile "org.scalatest:scalatest_${scalaMajorVersion}:3.0.8"
  }

  tasks.withType(ScalaCompile) {
    configure(scalaCompileOptions.forkOptions) {
      memoryMaximumSize = '2048m'
    }
  }

  test {
    // Don't use cached test results from the gradle build cache
    inputs.property "integration.date", java.time.LocalDateTime.now()

    // half the cores, but at least four
    def forks = Math.max(4, Runtime.runtime.availableProcessors().intdiv(2))
    doFirst {
      println "Executing tests with ${forks} forks"
    }
    maxHeapSize = '2048m'
    maxParallelForks = forks
    systemProperty 'TestProcessId', 'F1' // FIXME
    ignoreFailures = System.env['bamboo_working_directory'] != null // So we can quarantine in Bamboo
    testLogging {
      events "passed", "skipped", "failed"
      exceptionFormat "full"
    }
  }

  war.dependsOn(generateRebel)
}

task generateEncryptionKey() {
  doLast {
    def keyGenerator = javax.crypto.KeyGenerator.getInstance("AES")
    def random = java.security.SecureRandom.getInstance("SHA1PRNG")

    keyGenerator.init(256, random)
    def secretKey = keyGenerator.generateKey()


    println new String(java.util.Base64.encoder.encode(secretKey.encoded), java.nio.charset.StandardCharsets.UTF_8)
  }
}

wrapper {
  gradleVersion = '6.0.1'
  distributionType = 'ALL'
}
